int g_ar_a;
int g_ar_b;
int g_ar_c;
int g_ar_d;
int g_ar_e;
int g_ar_f;
int g_ar_g;
int g_ar_h;
int g_ar_i;
int g_ar_j;
int g_a[2];
int g_b[2];
int g_c[2];
int g_d[2];
int g_e[2];

int foo0(int para_a, int para_b, int para_c, int para_d, int para_e, int para_f, int para_g, int para_h, int para_i, int para_j)
{
    int ar_a;
    int ar_b;
    int ar_c;
    int ar_d;
    int ar_e;
    int ar_f;
    int ar_g;
    int ar_h;
    int ar_i;
    int ar_j;
    int a[2];
    int b[2];
    int c[2];
    int d[2];
    int e[2];
    ar_a = 1;
    ar_b = 2;
    ar_c = 3;
    ar_d = -5;
    ar_e = 1;
    ar_f = -3;
    ar_g = -1;
    ar_h = 0;
    ar_i = -5;
    ar_j = 2;
    a[0] = 3;
    a[1] = 1;
    b[0] = 0;
    b[1] = 2;
    c[0] = 2;
    c[1] = -1;
    d[0] = 1;
    d[1] = -4;
    e[0] = 3;
    e[1] = -4;

    {
        ar_i = (ar_d);
        printf(" ", ((ar_b)));
        e[1] = (0 + b[0]);
        g_b[0] = (g_e[1] + ar_d);
        printf(" ", (2));
        g_a[1] = (-5);
        if ((g_d[1]) > (ar_g + g_d[1] * d[1]))
        {
        }
        else
        {
        }
        ar_c = (g_ar_h + b[1] + para_e + -5 * -4);
        b[1] = (ar_h);
        g_ar_e = (-1);
        ar_h = (g_a[0]);
        e[0] = (-1 + a[0] * para_f + para_j);
        a[1] = (g_ar_b);
        if ((e[1]) <= (a[1]))
        {
        }
        else
        {
        }
        g_c[1] = (d[0]);
        if ((e[1]) != (b[1] * 2 * -3 + -2 - g_ar_h + ar_d - ar_g - ar_c))
        {
        }
        else
        {
        }
        if ((ar_d) != (1))
        {
        }
        else
        {
        }
        para_b = (g_ar_j - ar_g);
        c[0] = (a[0] * ar_f);
        if ((g_c[0] * para_d - (((para_c + g_ar_c)) - g_d[0] * 2 * (ar_i * 2)) * b[1]) <= (para_j))
        {
        }
        else
        {
        }
        para_h = (g_ar_j * 2);
        g_e[1] = (g_d[0]);
        if ((ar_d * (-5) - d[0] - -4 * a[1]) == (g_a[0]))
        {
        }
        else
        {
        }
        if ((ar_d + 4 + g_c[1]) > (g_ar_g))
        {
        }
        else
        {
        }
        e[1] = (para_i - 4 + (-4 * d[0] + g_b[0]) + 4 * ar_e + (ar_j));
        g_ar_i = ((g_ar_c - para_i - (ar_h)) * e[1]);
        if ((ar_b - g_ar_j + ar_e + g_d[0] * g_ar_j) >= (ar_j * (g_ar_e * g_e[0])))
        {
        }
        else
        {
        }
        g_ar_h = ((ar_d) - (3) - para_c * g_b[1] - para_j);
        ar_e = (g_c[1]);
        e[1] = (1);
        printf(" ", (-4 - g_b[0] + g_b[1]));
        g_d[1] = (g_b[1] + ar_a - 1 * ar_e + g_a[1]);
        a[0] = (ar_h);
        printf(" ", (g_ar_e - 3));
        if ((g_d[1] + c[1]) > (c[1] + para_d + c[1]))
        {
        }
        else
        {
        }
        g_c[0] = (g_d[1] - g_c[0] - 4);
        g_a[1] = (-3 - g_ar_i + -4);
        d[0] = (ar_a);
        printf(" ", (-4 - -5 - -4));
        e[0] = (g_ar_h);
        ar_h = (ar_i - para_c);
        ar_i = (g_c[0] - g_a[1]);
        g_d[0] = ((a[1]) + -5 - -4 + para_b * c[1]);
        g_ar_f = (g_e[1]);
        g_a[1] = (g_a[1] * ar_a);
        printf(" ", (1));
        g_ar_f = (g_e[1]);
        g_d[1] = (c[0]);
        if (((g_ar_h)) <= (g_a[0]))
        {
        }
        else
        {
        }
        g_c[1] = (g_c[1]);
        if (((4 * e[0])) != (-2 - g_ar_f - ar_i))
        {
        }
        else
        {
        }
        if ((a[0] + -4 + g_b[0] - g_a[0] + para_c - g_d[0]) != (c[0]))
        {
        }
        else
        {
        }
        c[1] = (e[0]);
        g_d[0] = (0);
        g_e[0] = (ar_j);
        a[0] = (g_d[0] + (g_ar_e + -4 * 2 + (-3) + 2) - 2);
        ar_d = (-2 - g_c[0] - g_e[1]);
        g_c[0] = (ar_d + ar_d);
        g_c[1] = (g_e[0] + g_ar_f);
        d[1] = (g_d[0]);
        g_ar_g = (-1);
        ar_c = ((d[1] - (ar_j) + -4 * c[0] + -2) - ar_a);
        g_e[1] = (e[0]);
        g_ar_i = (a[0]);
        ar_c = (0);
        e[0] = (3);
        d[0] = (((ar_e * 0 - g_ar_a)));
        ar_e = (g_a[1]);
        printf(" ", (para_i));
        g_ar_c = (g_ar_i - -1 * g_c[1] + g_d[0]);
        g_a[0] = (g_b[0]);
        a[0] = ((2));
        g_ar_e = (-5);
        g_e[0] = (a[0]);
        printf(" ", (ar_d));
        ar_i = (g_d[0] - ar_f);
        e[0] = (a[0] + 1);
        a[1] = (-1);
        ar_g = (g_a[1] * a[0]);
        para_h = (d[1]);
        a[0] = (para_f - 1 * a[1] + g_a[1]);
        g_e[0] = ((g_e[1] * g_a[0]) - e[0]);
        a[1] = ((-2));
        ar_a = (g_c[1] * g_d[0] - e[0]);
        d[0] = ((ar_f + 1));
        b[0] = (-4);
        g_a[0] = ((g_e[1] * e[0]) + (g_a[1]) * ar_c - ar_g);
        g_b[0] = (b[0] * -2 + 0 * ar_e);
        para_d = (g_ar_g);
        a[1] = (-5 - (e[1]));
        g_c[0] = (3);
        g_e[1] = (0 * (g_e[1] - g_a[1]));
        para_c = (ar_c * 4);
        ar_j = ((1 + g_e[1] * -3 + b[0] - g_c[0]));
        if ((g_ar_d) <= (d[1]))
        {
        }
        else
        {
        }
        para_c = (ar_c);
        g_ar_h = (-4);
        ar_c = (ar_d - 0);
        if ((d[0]) == (a[0] - -5 - -5 + g_b[0]))
        {
        }
        else
        {
        }
        g_d[0] = (b[0] * (a[1] - ar_g - -1));
    }
    printf("\nglo_vars:");
    printf(" ", g_ar_a);
    printf(" ", g_ar_b);
    printf(" ", g_ar_c);
    printf(" ", g_ar_d);
    printf(" ", g_ar_e);
    printf(" ", g_ar_f);
    printf(" ", g_ar_g);
    printf(" ", g_ar_h);
    printf(" ", g_ar_i);
    printf(" ", g_ar_j);
    printf("\n");
    printf("global_arrays:");
    printf(" ", g_a[0]);
    printf(" ", g_a[1]);
    printf(" ", g_b[0]);
    printf(" ", g_b[1]);
    printf(" ", g_c[0]);
    printf(" ", g_c[1]);
    printf(" ", g_d[0]);
    printf(" ", g_d[1]);
    printf(" ", g_e[0]);
    printf(" ", g_e[1]);
    printf("\n");
    printf("local_vars:");
    printf(" ", ar_a);
    printf(" ", ar_b);
    printf(" ", ar_c);
    printf(" ", ar_d);
    printf(" ", ar_e);
    printf(" ", ar_f);
    printf(" ", ar_g);
    printf(" ", ar_h);
    printf(" ", ar_i);
    printf(" ", ar_j);
    printf("\n");
    printf("local_arrays:");
    printf(" ", a[0]);
    printf(" ", a[1]);
    printf(" ", b[0]);
    printf(" ", b[1]);
    printf(" ", c[0]);
    printf(" ", c[1]);
    printf(" ", d[0]);
    printf(" ", d[1]);
    printf(" ", e[0]);
    printf(" ", e[1]);
    printf("\n");
    return (-5);
}
void main()
{
    g_ar_a = -3;
    g_ar_b = 3;
    g_ar_c = 2;
    g_ar_d = 1;
    g_ar_e = 3;
    g_ar_f = -3;
    g_ar_g = -1;
    g_ar_h = -3;
    g_ar_i = 1;
    g_ar_j = -5;
    g_a[0] = -4;
    g_a[1] = -5;
    g_b[0] = 1;
    g_b[1] = -2;
    g_c[0] = -1;
    g_c[1] = 4;
    g_d[0] = 2;
    g_d[1] = -1;
    g_e[0] = 3;
    g_e[1] = 1;
    foo0(foo0(2, 1, -4, -1, -3, -5, -2, -3, 2, -3), -5, -1, -4, -4, 4, 4, -3, 4, -3);
}